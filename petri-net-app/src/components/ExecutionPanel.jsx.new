import React, { useState, useEffect, useRef } from 'react';
import {
  initializeSimulator,
  updateSimulator,
  fireTransition,
  fireMultipleTransitions,
  findNonConflictingTransitions,
  getEnabledTransitions
} from '../utils/simulator';

const ExecutionPanel = ({ elements, onUpdateElements, onEnabledTransitionsChange }) => {
  const { places, transitions, arcs } = elements;
  const [enabledTransitions, setEnabledTransitions] = useState([]);
  const [isSimulatorReady, setIsSimulatorReady] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isSimulating, setIsSimulating] = useState(false);
  const simulationIntervalRef = useRef(null);
  const noEnabledTransitionsCountRef = useRef(0);
  const simulationIterationCountRef = useRef(0);
  const MAX_SIMULATION_ITERATIONS = 20;
  
  // Initialize the simulator when the elements change
  useEffect(() => {
    const initSimulator = async () => {
      if (places.length === 0 && transitions.length === 0) {
        setIsSimulatorReady(false);
        setEnabledTransitions([]);
        
        // Clear enabled transitions in parent component
        if (onEnabledTransitionsChange) {
          onEnabledTransitionsChange([]);
        }
        return;
      }
      
      setIsLoading(true);
      setError(null);
      
      try {
        await initializeSimulator(elements);
        setIsSimulatorReady(true);
        
        // Compute enabled transitions
        const enabled = await getEnabledTransitions();
        setEnabledTransitions(enabled);
        
        // Notify parent component about enabled transitions
        if (onEnabledTransitionsChange) {
          onEnabledTransitionsChange(enabled);
        }
      } catch (err) {
        console.error('Error initializing simulator:', err);
        setError('Failed to initialize simulator');
        setIsSimulatorReady(false);
      } finally {
        setIsLoading(false);
      }
    };
    
    initSimulator();
  }, [elements]);  // Remove onEnabledTransitionsChange from dependencies to prevent loops
  
  // Handle firing a transition
  const handleFireTransition = async (transitionId) => {
    if (!isSimulatorReady) return;
    
    setIsLoading(true);
    setError(null);
    
    try {
      // Fire the transition and get the updated Petri net
      const updatedPetriNet = await fireTransition(transitionId);
      
      // Update the simulator with the new state
      await updateSimulator(updatedPetriNet);
      
      // Update the elements in the parent component
      if (onUpdateElements) {
        onUpdateElements(updatedPetriNet);
      }
      
      // Compute the new enabled transitions
      const newEnabledTransitions = await getEnabledTransitions();
      setEnabledTransitions(newEnabledTransitions);
      
      // Notify parent component about enabled transitions
      if (onEnabledTransitionsChange) {
        onEnabledTransitionsChange(newEnabledTransitions);
      }
    } catch (err) {
      console.error(`Error firing transition ${transitionId}:`, err);
      setError(`Failed to fire transition ${transitionId}`);
    } finally {
      setIsLoading(false);
    }
  };
  
  // Clean up simulation interval when component unmounts
  useEffect(() => {
    return () => {
      if (simulationIntervalRef.current) {
        clearInterval(simulationIntervalRef.current);
      }
    };
  }, []);

  // Handle firing all non-conflicting enabled transitions simultaneously
  const handleFirePetriNet = async () => {
    if (!isSimulatorReady || enabledTransitions.length === 0) return;
    
    setIsLoading(true);
    setError(null);
    
    try {
      // Find all non-conflicting transitions to fire simultaneously
      const transitionsToFire = await findNonConflictingTransitions(enabledTransitions, places, arcs);
      
      if (transitionsToFire.length === 0) {
        setError('No transitions to fire');
        return;
      }
      
      // If there's only one transition to fire, use the original method for consistency
      if (transitionsToFire.length === 1) {
        await handleFireTransition(transitionsToFire[0]);
      } else {
        // Fire multiple transitions simultaneously
        const updatedPetriNet = await fireMultipleTransitions(transitionsToFire);
        
        // Update the elements in the parent component
        if (onUpdateElements) {
          onUpdateElements(updatedPetriNet);
        }
        
        // Compute the new enabled transitions
        const newEnabledTransitions = await getEnabledTransitions();
        setEnabledTransitions(newEnabledTransitions);
        
        // Notify parent component about enabled transitions
        if (onEnabledTransitionsChange) {
          onEnabledTransitionsChange(newEnabledTransitions);
        }
      }
    } catch (err) {
      console.error('Error firing transitions:', err);
      setError('Failed to fire transitions');
    } finally {
      setIsLoading(false);
    }
  };
  
  // Helper to stop the simulation
  const stopSimulation = () => {
    if (simulationIntervalRef.current) {
      clearInterval(simulationIntervalRef.current);
      simulationIntervalRef.current = null;
    }
    setIsSimulating(false);
    console.log('Simulation stopped');
  };

  // One simulation step
  const simulateOneStep = async () => {
    try {
      // Increment the iteration counter
      simulationIterationCountRef.current++;
      console.log(`Simulation iteration: ${simulationIterationCountRef.current}`);
      
      // Safety check - if we've exceeded the maximum number of iterations, force stop
      if (simulationIterationCountRef.current > MAX_SIMULATION_ITERATIONS) {
        console.log(`Maximum simulation iterations (${MAX_SIMULATION_ITERATIONS}) reached, stopping`);
        return false;
      }
      
      // Check for enabled transitions
      const currentEnabled = await getEnabledTransitions();
      
      // If no transitions are enabled
      if (currentEnabled.length === 0) {
        noEnabledTransitionsCountRef.current++;
        console.log(`No enabled transitions found (count: ${noEnabledTransitionsCountRef.current})`);
        
        if (noEnabledTransitionsCountRef.current >= 2) {
          console.log('No enabled transitions for 2 consecutive checks, stopping simulation');
          return false;
        }
      } else {
        // Reset counter when we find enabled transitions
        noEnabledTransitionsCountRef.current = 0;
      }
      
      // Don't proceed if there are no enabled transitions
      if (currentEnabled.length === 0) {
        console.log('No enabled transitions to fire, stopping simulation');
        return false;
      }
      
      // Try to fire transitions
      try {
        // Fire transitions using the regular fire button logic
        await handleFirePetriNet();
        
        // Check if there are still enabled transitions after firing
        const afterFiringEnabled = await getEnabledTransitions();
        if (afterFiringEnabled.length === 0) {
          console.log('No transitions enabled after firing, stopping simulation');
          return false;
        }
        
        // Continue simulation
        return true;
      } catch (error) {
        console.warn('Error during transition firing:', error);
        
        // Try to check if any transitions are still enabled
        try {
          const errorCheckEnabled = await getEnabledTransitions();
          if (errorCheckEnabled.length === 0) {
            console.log('No enabled transitions after error, stopping simulation');
            return false;
          }
          // If we still have enabled transitions, continue despite the error
          return true;
        } catch (checkError) {
          console.error('Error checking transitions after firing error:', checkError);
          return false;
        }
      }
    } catch (error) {
      console.error('Simulation step error:', error);
      return false;
    }
  };
  
  // Start or stop automatic simulation
  const handleSimulate = () => {
    if (isSimulating) {
      // Stop simulation
      stopSimulation();
    } else {
      // Start simulation
      setIsSimulating(true);
      
      // Reset counters
      noEnabledTransitionsCountRef.current = 0;
      simulationIterationCountRef.current = 0;
      
      console.log('Starting simulation');
      
      // Run the first step immediately
      simulateOneStep().then(canContinue => {
        if (canContinue) {
          // Set up interval for continuous firing
          simulationIntervalRef.current = setInterval(() => {
            simulateOneStep().then(canContinue => {
              if (!canContinue) {
                stopSimulation();
              }
            }).catch(error => {
              console.error('Error in simulation step:', error);
              stopSimulation();
            });
          }, 500);
        } else {
          stopSimulation();
        }
      }).catch(error => {
        console.error('Error starting simulation:', error);
        stopSimulation();
      });
    }
  };

  return (
    <div data-testid="execution-panel" className="execution-panel p-4 bg-gray-100 border-t border-gray-300">
      <h2 className="text-lg font-semibold mb-2">Execution</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-2 rounded mb-4">
          {error}
        </div>
      )}
      
      <div className="flex mb-4">
        <div className="flex items-end space-x-2">
          <button
            className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:bg-gray-400"
            onClick={handleFirePetriNet}
            disabled={!isSimulatorReady || enabledTransitions.length === 0 || isLoading || isSimulating}
          >
            Fire
          </button>
          <button
            className="px-3 py-1 bg-green-500 hover:bg-green-600 text-white rounded disabled:bg-gray-400 flex items-center space-x-1"
            onClick={handleSimulate}
            disabled={!isSimulatorReady || enabledTransitions.length === 0 || isLoading || isSimulating}
          >
            <span>Simulate</span>
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </button>
          <button
            className="px-3 py-1 bg-red-500 hover:bg-red-600 text-white rounded disabled:bg-gray-400 flex items-center space-x-1"
            onClick={stopSimulation}
            disabled={!isSimulating}
          >
            <span>Stop</span>
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 10h6v6H9z" />
            </svg>
          </button>
        </div>
      </div>
      
      <div className="flex">
        <div className="current-marking mr-8 w-1/2">
          <h3 className="text-sm font-medium mb-2">Current Marking</h3>
          {isLoading ? (
            <p className="text-gray-500">Loading...</p>
          ) : places.length === 0 ? (
            <p className="text-gray-500">No places defined</p>
          ) : (
            <div className="grid grid-cols-3 gap-2">
              {places.map(place => (
                <div key={place.id} className="flex items-center">
                  <span className="font-medium mr-2">{place.name}:</span>
                  <span>{place.tokens || 0}</span>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ExecutionPanel;
